#!/bin/bash
# Copyright 2024 Viel Losero.
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

cd $(dirname $0) && CWD=$(pwd)
# make temp dir
TMP_DIR=/tmp/HugeSlackBuilds
[[ ! -d $TMP_DIR ]] && mkdir -vp $TMP_DIR
# make log file
LOG_FILE=/tmp/HugeSlackBuilds.log
# clean log file for each run
echo > $LOG_FILE
# Output dir where we create the HugeSlackBuild
OUT_DIR=${OUT_DIR:-$TMP_DIR}
#OUT_FILE=HugeSlackBuild
REPO_SLACKWARE_SOURCE=/opt/slackware-repositories/x86/slackware/slackware64-15.0
REPO_SLACKBUILDS_SOURCE=/opt/slackware-repositories/slackbuilds/15.0
# default verbose
VERBOSE="${VERBOSE:-0}"

# function that make HugeSlackBuild files
make_huge(){
# Sanity check
#pwd
# if more than one SlackBuild dont run and log it to make manual attention 
if [ "$(ls *.SlackBuild | wc -l)" == "1" ] ; then 
# Clean MD5
MD5=

# find SlackBuild name
#SLACKBUILDNAME=$(ls *.SlackBuild | head -1 | cut -d. -f1)
SLACKBUILDNAME=$(ls *.SlackBuild | head -1 | sed 's/.SlackBuild//')

# get half output file name, complete output file name are ${SLACKBUILDNAME}.${VERSION}.$MD5.HugeSlackBuild
# late when all file echoed we can get md5 and get all output file name.
OUT_FILE=${SLACKBUILDNAME}.${VERSION}
# check if it is a patch
if pwd | grep "/patches/" ; then 
  OUT_FILE=${SLACKBUILDNAME}.patch.${VERSION}
fi

# echo first line to HugeSlackBuild
echo "#!/bin/bash" > $OUT_DIR/$OUT_FILE

# echo to get current work dir for HugeSlackBuild
echo "# Get current work dir" >> $OUT_DIR/$OUT_FILE
echo "cd $(dirname $0) && CWD=$(pwd)" >> $OUT_DIR/$OUT_FILE

#Build in tmpfs
#tmpfs            /tmp             tmpfs       size=20G,nodev,nosuid    0 0
#mount --mkdir -t tmpfs -o defaults,size=20G tmpfs /mnt/

# make chroot env
# echo "# Make chroot env" >> $OUT_DIR/$OUT_FILE
# echo "mkdir -vp ${CWD}/chroot_folder" >> $OUT_DIR/$OUT_FILE
# echo "mkdir -vp ${CWD}/{proc,sys,dev}/" || exit 2 >> $OUT_DIR/$OUT_FILE
# echo "mount -t proc /proc ${CWD}/proc || exit 2" >> $OUT_DIR/$OUT_FILE
# echo "mount -o bind /sys ${CWD}/sys || exit 2" >> $OUT_DIR/$OUT_FILE
# echo "mount -o bind /dev ${CWM}/dev || exit 2" >> $OUT_DIR/$OUT_FILE
#
# echo "chroot ${CWD}/chroot_folder /bin/bash" >> $OUT_DIR/$OUT_FILE
#
# echo "umount chroot_folder/{proc,sys,dev}/ || exit 2" >> $OUT_DIR/$OUT_FILE
#

# cat LICENCE to HugeSlackBuild
cat <<EOF >> $OUT_DIR/$OUT_FILE
# Copyright 2024 Viel Losero.
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
EOF

# echo dirs to HugeSlackBuild
echo "# Make source dirs" >> $OUT_DIR/$OUT_FILE
for dir in $(find . -type d | grep -v "^.$" ) ; do
[[ "$VERBOSE" -eq "2" ]] && \
  echo "Found dir: $dir"
  echo "mkdir -vp $dir" >> $OUT_DIR/$OUT_FILE
done

# cat files to HugeSlackBuild
echo "# Cat base64 source files" >> $OUT_DIR/$OUT_FILE
for file in $(find . -type f ) ; do
  if [ "$file" == "./create.HugeSlackBuild" -o "$file" == "./$OUT_FILE" -o "$file" == "./${OUT_FILE}.tar.gz" ] ; then
    echo "Excluding $file"
  else
[[ "$VERBOSE" -eq "2" ]] && \
    echo "Found file: $file"
    # cat file in base64 to HugeSlackBuild
    echo "cat <<EOF | base64 -d > $file" >> $OUT_DIR/$OUT_FILE
    cat $file | base64 >> $OUT_DIR/$OUT_FILE
    echo "EOF" >> $OUT_DIR/$OUT_FILE
    #echo md5sum to HugeSlackbuild
    echo "# Check MD5 file or exit" >> $OUT_DIR/$OUT_FILE
    echo "echo \"$(md5sum $file)\" | md5sum -c || exit 1" >> $OUT_DIR/$OUT_FILE

  fi
done


echo "# Epoch date for reproduciblebuilds" >> $OUT_DIR/$OUT_FILE
# add SOURCE_DATE_EPOCH
# https://reproducible-builds.org/docs/source-date-epoch/
#BUILD_DATE="$(date --utc --date="@${SOURCE_DATE_EPOCH:-$(date +%s)}" +%Y-%m-%d)"
#date format
#DATE_FMT="+%Y-%m-%d"
# for BSD
#BUILD_DATE=$(date -u -d "@$SOURCE_DATE_EPOCH" "$DATE_FMT" 2>/dev/null || date -u -r "$SOURCE_DATE_EPOCH" "$DATE_FMT" 2>/dev/null || date -u "$DATE_FMT")
SOURCE_DATE_EPOCH="${SOURCE_DATE_EPOCH:-$(date +%s)}"
echo "SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH" >> ${OUT_DIR}/${OUT_FILE}

# add run SlackBuild auto 
echo "# Start SlackBuild" >> $OUT_DIR/$OUT_FILE
echo "bash $SLACKBUILDNAME.SlackBuild" >> ${OUT_DIR}/${OUT_FILE}

# add REQUIRES to HugeSlackBuild
# get dep from mi slackdep db
#cat /var/cache/slackdep/glibc.dep.lst | tr "\n" " "
# check dep
# for i in $(cat /var/cache/slackdep/bash.dep.lst) ; do ls /var/log/packages/$i-[0-9]* ; done
# REQUIRES=
echo "# echo REQUIRES" >> $OUT_DIR/$OUT_FILE
if [ -e /var/cache/slackdep/$SLACKBUILDNAME.dep.lst ] ; then
  REQUIRES=$(cat /var/cache/slackdep/$SLACKBUILDNAME.dep.lst | tr "\n" " ")
  echo "REQUIRES=\"${REQUIRES}\"" >> ${OUT_DIR}/${OUT_FILE}
  echo "echo \"REQUIRES: ${REQUIRES}\"" >> ${OUT_DIR}/${OUT_FILE}
fi

# cd to out dir to compres only file and no dirs
cd ${OUT_DIR} || exit 1

# add md5 to the name
MD5=$(md5sum ${OUT_FILE} | cut -d" " -f1)
OUTPUT_FILE="${OUT_FILE}.$MD5.HugeSlackBuild"
# move file
mv ${OUT_FILE} ${OUTPUT_FILE}
[[ "$VERBOSE" -eq "3" ]] && \
  echo "MD5: ${OUTPUT_FILE}"

# compress HugeSlackBuild file
#tar -czvf ${OUT_DIR}/${OUT_FILE}.tar.gz ${OUT_DIR}/${OUT_FILE}
tar --zstd -cf ${OUT_FILE}.HugeSlackBuild.tar.zst ${OUTPUT_FILE}
[[ "$VERBOSE" -eq "0" ]] && \
  echo "Output file ${OUTPUT_FILE}.tar.zst"

# add md5 to compresed file name
#MD5_ZSTD=$(md5sum ${OUT_FILE}.tar.zst | cut -d" " -f1)

# 
#mv ${OUT_FILE}.tar.zst ${OUT_FILE}.${MD5_ZSTD}.tar.zst

# remove uncompress package
rm ${OUTPUT_FILE}

else
  DIR_NOW=$(pwd)
  echo "Error to many SlackBuild in $DIR_NOW" >> $LOG_FILE 
[[ "$VERBOSE" -ge "0" ]] && \
  echo "Error to many SlackBuild in $DIR_NOW" 
  
fi
}

## Make HugeSlackBuilds for slackware
# for i in $(grep ".*\.SlackBuild$" /opt/slackware-repositories/x86/slackware/slackware64-15.0/CHECKSUMS.md5 | cut -d" " -f3-) ; do x=$(echo $i | rev | cut -d/ -f2-  | rev | cut -d" " -f3) ; if [ "$(ls /opt/slackware-repositories/x86/slackware/slackware64-15.0/$x/*.SlackBuild | wc -l)" != "1" ] ; then echo $i ; fi   ; done > /tmp/more.than.2.slackbuild

# find SlackBuild files to make HugeSlackBuilds
for slackbuild_line in $(grep ".*\.SlackBuild$" ${REPO_SLACKWARE_SOURCE}/CHECKSUMS.md5 | cut -d" " -f3-) ; do
  #echo "$slackbuild_line"
  slackbuild_path=$(echo $slackbuild_line | rev | cut -d/ -f2-  | rev | cut -d" " -f3)
  VERSION=$(echo $REPO_SLACKWARE_SOURCE | rev | cut -d/ -f1 | rev)
  #echo $VERSION
[[ "$VERBOSE" -eq "0" ]] && \
  echo "[+] Processing ${REPO_SLACKWARE_SOURCE}/$slackbuild_path"
  cd ${REPO_SLACKWARE_SOURCE}/$slackbuild_path || exit 1
[[ "$VERBOSE" -eq "1" ]] && \
  echo -n "cd " &&  pwd
  make_huge
done


## Make HugeSlackBuilds for slackbuilds
#
#lrwxrwxrwx 1 root root 44 Jul 28  2023 /var/lib/sbopkg/SBo/15.0 -> /opt/slackware-repositories/slackbuilds/15.0
# ls -la /var/cache/sbopkg/
#
#

