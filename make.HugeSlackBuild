#!/bin/bash
# Copyright 2024 Viel Losero.
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Add version needed to can reproduce HugeSlackBuild scripts with same make.HugeslackBuild version 
VERSION=0.0.3

#cd $(dirname $0) && CWD=$(pwd)
# make temp dir
TMP_DIR=/tmp/HugeSlackBuilds
[[ ! -d $TMP_DIR ]] && mkdir -vp $TMP_DIR
# make log file
LOG_FILE=/tmp/HugeSlackBuilds.log
# clean log file for each run
# changed to run on each dir so dont delete log file when run delete on make world
#echo > $LOG_FILE
# Output dir where we create the HugeSlackBuild
OUT_DIR=${OUT_DIR:-$TMP_DIR}
#OUT_FILE=HugeSlackBuild
# distribution Version for name
DIST_VERSION=${DIST_VERSION:-15}
#echo $DIST_VERSION

# default verbose
VERBOSE="${VERBOSE:-0}"
[[ "$VERBOSE" -eq "0" ]] && \
  echo -n "[+] Working on dir: " && pwd

# Sanity check
# if more than one SlackBuild dont run and log it to make manual attention 
if [ "$(ls *.SlackBuild | wc -l)" == "1" ] ; then 
# Clean MD5
MD5=

# Set source date epoch for reporducible builds
SOURCE_DATE_EPOCH="${SOURCE_DATE_EPOCH:-$(date +%s)}"
# set SOURCE_DATE_EPOCH to use with patch
#date -s "@$SOURCE_DATE_EPOCH"

# Changes for reproducible builds
# I use a patch because is more clean to check sources md5 sums, and dont want to touch SlackBuilds scripts
# Do not use diff -u because timestamps or use environment to set timezone etc.
# Change gzip -9 to gzip -n -9 
if grep -n "gzip -9" $(ls *.SlackBuild) >/dev/null ; then 
  cat  $(ls *.SlackBuild) | sed  '5i # Modified by Viel Losero 2024 for ReproducibleBuilds'  | \
    sed '/gzip -9/i # Add -n option to gzip make reproducible when GZIP_NO_TIMESTAMPS is set' | \
    sed 's/gzip -9/gzip -n -9/g' | diff -a $(ls *.SlackBuild) - > $(ls *.SlackBuild).reproduciblebuilds.patch
    # reset mtime because change 
    touch --date @${SOURCE_DATE_EPOCH} $(ls *.SlackBuild).reproduciblebuilds.patch
fi
#
# add this if some tar compress, no in decompress
##  # Source date epoch for reproduciblebuilds for tar man files
##  unset MTIME
##  if [ -n "${SOURCE_DATE_EPOCH}" ]; then
##      MTIME="--clamp-mtime --mtime=@${SOURCE_DATE_EPOCH}"
##  fi

# find SlackBuild name
#SLACKBUILDNAME=$(ls *.SlackBuild | head -1 | cut -d. -f1)
SLACKBUILDNAME=$(ls *.SlackBuild | head -1 | sed 's/.SlackBuild//')

# try to get PRINT_PACKAGE_NAME ,some packages fail and build xd
### Set packagename Check if we can get PRINT_PACKAGE_NAME
##if grep PRINT_PACKAGE_NAME ${SLACKBUILDNAME}.SlackBuild >/dev/null ; then
##  PACKAGE_NAME=$(PRINT_PACKAGE_NAME=y bash  ${SLACKBUILDNAME}.SlackBuild)
##else
##  PACKAGE_NAME=${SLACKBUILDNAME}
##fi
##[[ "$VERBOSE" -ge "0" ]] && \
##echo "Package name: $PACKAGE_NAME"


# get half output file name, complete output file name are ${SLACKBUILDNAME}.${PKG_VERSION}.$MD5.HugeSlackBuild
# late when all file echoed we can get md5 and get all output file name.
if [ -z $PKG_VERSION ] ; then 
  OUT_FILE=${SLACKBUILDNAME}
  # check if it is a patch
  if pwd | grep "/patches/" ; then 
    OUT_FILE=${SLACKBUILDNAME}.patch
  fi
else
  OUT_FILE=${SLACKBUILDNAME}.${PKG_VERSION}
  # check if it is a patch
  if pwd | grep "/patches/" ; then 
    OUT_FILE=${SLACKBUILDNAME}.${PKG_VERSION}.patch
  fi
fi

# echo first line to HugeSlackBuild
echo "#!/bin/bash" > $OUT_DIR/$OUT_FILE

# cat LICENCE to HugeSlackBuild
cat <<EOF >> $OUT_DIR/$OUT_FILE
# Copyright 2024 Viel Losero.
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
EOF

# get version used to make HugeSlackBuild script
echo "" >> $OUT_DIR/$OUT_FILE
echo "MAKER_VERSION=$VERSION" >> $OUT_DIR/$OUT_FILE
echo 'echo "make.HugeSlackBuild version used: $MAKER_VERSION"' >> $OUT_DIR/$OUT_FILE
echo 'echo ""' >> $OUT_DIR/$OUT_FILE

# add SOURCE_DATE_EPOCH
# https://reproducible-builds.org/docs/source-date-epoch/
echo "" >> $OUT_DIR/$OUT_FILE
echo "# Epoch date for reproduciblebuilds" >> $OUT_DIR/$OUT_FILE
echo "SOURCE_DATE_EPOCH=\${SOURCE_DATE_EPOCH:-${SOURCE_DATE_EPOCH}}" >> ${OUT_DIR}/${OUT_FILE}
echo 'echo "Seting SOURCE_DATE_EPOCH"' >> $OUT_DIR/$OUT_FILE
echo 'date -s "@$SOURCE_DATE_EPOCH"' >> ${OUT_DIR}/${OUT_FILE}
echo 'echo ""' >> $OUT_DIR/$OUT_FILE

# echo environment
#echo 'cat << EOF > env.HugeSlackBuild' >> ${OUT_DIR}/${OUT_FILE}
#printenv | sed 's/=/="/' | sed 's/$/"/' >> ${OUT_DIR}/${OUT_FILE}
#echo 'EOF' >> ${OUT_DIR}/${OUT_FILE}

# echo to get current work dir for HugeSlackBuild
echo "" >> $OUT_DIR/$OUT_FILE
echo "# Get current work dir" >> $OUT_DIR/$OUT_FILE
echo 'cd $(dirname $0) && CWD=$(pwd)' >> $OUT_DIR/$OUT_FILE

#Build in tmpfs
#tmpfs            /tmp             tmpfs       size=20G,nodev,nosuid    0 0
#mount --mkdir -t tmpfs -o defaults,size=20G tmpfs /mnt/

# make chroot env
# echo "# Make chroot env" >> $OUT_DIR/$OUT_FILE
# echo "mkdir -vp ${CWD}/chroot_folder" >> $OUT_DIR/$OUT_FILE
# echo "mkdir -vp ${CWD}/{proc,sys,dev}/" || exit 2 >> $OUT_DIR/$OUT_FILE
# echo "mount -t proc /proc ${CWD}/proc || exit 2" >> $OUT_DIR/$OUT_FILE
# echo "mount -o bind /sys ${CWD}/sys || exit 2" >> $OUT_DIR/$OUT_FILE
# echo "mount -o bind /dev ${CWM}/dev || exit 2" >> $OUT_DIR/$OUT_FILE
# echo "installpkg --root ${CWD}/chroot-folder REQUIRED_FOR_BUILD.t?z || exit 2" >> $OUT_DIR/$OUT_FILE
#
# echo "chroot ${CWD}/chroot_folder /bin/bash" >> $OUT_DIR/$OUT_FILE
#
# echo "umount chroot_folder/{proc,sys,dev}/ || exit 2" >> $OUT_DIR/$OUT_FILE

# echo dirs to HugeSlackBuild
echo "" >> $OUT_DIR/$OUT_FILE
echo "# Make source dirs" >> $OUT_DIR/$OUT_FILE
echo 'echo "Creating dirs if needed."' >> $OUT_DIR/$OUT_FILE
for dir in $(find . -type d | grep -v "^.$" | sort ) ; do
[[ "$VERBOSE" -eq "2" ]] && \
  echo "Found dir: $dir"
  echo "mkdir -vp $dir" >> $OUT_DIR/$OUT_FILE
done
echo 'echo ""' >> $OUT_DIR/$OUT_FILE

# cat files to HugeSlackBuild
# add sort if not file are found randomly
echo "" >> $OUT_DIR/$OUT_FILE
echo "# Cat base64 source files" >> $OUT_DIR/$OUT_FILE
echo 'echo "Extracting needed files."' >> $OUT_DIR/$OUT_FILE
for file in $(find . -type f | sort ) ; do
  #if [ "$file" == "./create.HugeSlackBuilds" -o "$file" == "./make.HugeSlackBuild" ] ; then
  if [ -z $(echo "$file" | grep -v ".HugeSlackBuild" ) ] ; then
    echo "Excluding $file"
  else
[[ "$VERBOSE" -eq "2" ]] && \
    echo "Found file: $file"
    # cat file in base64 to HugeSlackBuild
    echo "cat <<EOF | base64 -d > $file" >> $OUT_DIR/$OUT_FILE
    cat $file | base64 >> $OUT_DIR/$OUT_FILE
    echo "EOF" >> $OUT_DIR/$OUT_FILE
    #echo md5sum to HugeSlackbuild
    echo "# Check MD5 file or exit" >> $OUT_DIR/$OUT_FILE
    echo "echo \"$(md5sum $file)\" | md5sum -c || exit 1" >> $OUT_DIR/$OUT_FILE

  fi
done
echo 'echo ""' >> $OUT_DIR/$OUT_FILE

# add config and export env if needed on HugeSlackBuilds
echo "" >> $OUT_DIR/$OUT_FILE
echo "# Config and export env" >> $OUT_DIR/$OUT_FILE
cat << 'EOF' >> $OUT_DIR/$OUT_FILE
if [ -e env.HugeSlackBuild ] ; then
  # set -a will export all variables defined now
  set -a
  source env.HugeSlackBuild
  set +a
fi
EOF
# add print environment to HugeSlackBuilds
echo 'echo "Printing environment."' >> $OUT_DIR/$OUT_FILE
echo 'printenv'>> $OUT_DIR/$OUT_FILE
echo 'echo ""' >> $OUT_DIR/$OUT_FILE

# add apply reproduciblebuilds.patches to HugeSlackBuild
echo "" >> $OUT_DIR/$OUT_FILE
echo "# Applying reproduciblebuild patches" >> $OUT_DIR/$OUT_FILE
cat << 'EOF' >> $OUT_DIR/$OUT_FILE
if [ -e $(ls *.SlackBuild).reproduciblebuilds.patch ] ; then
  echo "Patching $(ls *.SlackBuild) to be reproducible."
  patch $(ls *.SlackBuild) < $(ls *.SlackBuild).reproduciblebuilds.patch || exit 1
fi
EOF
echo 'echo ""' >> $OUT_DIR/$OUT_FILE

# add run SlackBuild auto
echo "" >> $OUT_DIR/$OUT_FILE
echo "# Run slackbuild with SOURCE_DATE_EPOCH" >> $OUT_DIR/$OUT_FILE
echo 'echo "Runing $(ls *.SlackBuild) patched for reproduciblebuilds with Epoch date: $SOURCE_DATE_EPOCH"' >> $OUT_DIR/$OUT_FILE
echo "SOURCE_DATE_EPOCH=\$SOURCE_DATE_EPOCH bash $SLACKBUILDNAME.SlackBuild" >> ${OUT_DIR}/${OUT_FILE}
#echo 'echo ""' >> $OUT_DIR/$OUT_FILE # no needed makepkg leave last line empty

# add remove reproduciblebuild.patches to HugeSlackBuild
# This is to leave the sources untouched, dunno if it is convenient or are best leave the files patchied.
echo "" >> $OUT_DIR/$OUT_FILE
echo "# Unpatch SlackBuild" >> $OUT_DIR/$OUT_FILE
echo 'echo "Unpatch $(ls *.SlackBuild)."' >> $OUT_DIR/$OUT_FILE
echo 'patch -R $(ls *.SlackBuild) < $(ls *.SlackBuild).reproduciblebuilds.patch || exit 1' >> $OUT_DIR/$OUT_FILE
echo 'echo ""' >> $OUT_DIR/$OUT_FILE

# can't add requires others not have that.
### add REQUIRES to HugeSlackBuild
##echo "" >> $OUT_DIR/$OUT_FILE
##echo "# echo REQUIRES if found" >> $OUT_DIR/$OUT_FILE
##if [ -e /var/cache/slackdep/$SLACKBUILDNAME.dep.lst ] ; then
##  REQUIRES=$(cat /var/cache/slackdep/$SLACKBUILDNAME.dep.lst | tr "\n" " ")
##  echo "REQUIRES=\"${REQUIRES}\"" >> ${OUT_DIR}/${OUT_FILE}
##  echo "echo \"REQUIRES: ${REQUIRES}\"" >> ${OUT_DIR}/${OUT_FILE}
##  echo 'echo ""' >> $OUT_DIR/$OUT_FILE
##fi

# Change date for the HugeSlackbuild to match the SOURCE_DATE_EPOCH and no need to change system date.
# touch --date @${SOURCE_DATE_EPOCH} /tmp/${SLACKBUILDNAME}*.t?z

# add and check md5 of created package to HugeSlackBuild name
echo "" >> $OUT_DIR/$OUT_FILE
echo "# Add package MD5SUM to the HugeSlackBuild name" >> $OUT_DIR/$OUT_FILE
cat << 'EOF' >> ${OUT_DIR}/${OUT_FILE}
SLACKBUILDNAME=$(ls *.SlackBuild | head -1 | sed 's/.SlackBuild//')
PACKAGE_MD5SUM=$(md5sum /tmp/${SLACKBUILDNAME}*.t?z | cut -d" " -f1)
if echo $0 | grep $PACKAGE_MD5SUM >/dev/null ; then
  echo "Reproduciblebuild  md5 will match." 
  echo "Check output of: $0"
  md5sum /tmp/${SLACKBUILDNAME}*.t?z
  echo "If not match please report it at mantainer."
else
  if [[ "$(echo $0 | rev | cut -d/ -f1 | rev | awk 'BEGIN { FS = "." } { print NF}')" -ge "4" ]] ; then 
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    echo "! /tmp/${SLACKBUILDNAME}*.t?z md5 NOT match!!"
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  else
    echo "Added md5 to HugeSlackBuild script."
    SORT_FILE=$(echo $0 | rev | cut -d. -f2- | rev)
    mv $(basename $0) ${SORT_FILE}.${PACKAGE_MD5SUM}.HugeSlackBuild
    echo "New file: ${SORT_FILE}.${PACKAGE_MD5SUM}.HugeSlackBuild"
  fi
fi
EOF
echo 'echo ""' >> $OUT_DIR/$OUT_FILE

# cd to out dir to compres only file and no dirs
cd ${OUT_DIR} || exit 1

# add md5 to the HugeSlackbuild name
MD5=$(md5sum ${OUT_FILE} | cut -d" " -f1)
OUTPUT_FILE="${OUT_FILE}.$MD5.HugeSlackBuild"
# move file
mv ${OUT_FILE} ${OUTPUT_FILE}
[[ "$VERBOSE" -eq "3" ]] && \
  echo "MD5: ${OUTPUT_FILE}"
[[ "$VERBOSE" -eq "0" ]] && \
echo "Huge file: ${OUTPUT_FILE}"

# compress HugeSlackBuild file
echo "" >> $OUT_DIR/$OUT_FILE
#tar -czvf ${OUT_DIR}/${OUT_FILE}.tar.gz ${OUT_DIR}/${OUT_FILE}
tar --zstd -cf ${OUT_FILE}.HugeSlackBuild.tar.zst ${OUTPUT_FILE}
[[ "$VERBOSE" -eq "0" ]] && \
  echo "Output compressed file: ${OUT_DIR}/${OUT_FILE}.HugeSlackBuild.tar.zst"
echo 'echo ""' >> $OUT_DIR/$OUT_FILE

# add md5 to compresed file name
#MD5_ZSTD=$(md5sum ${OUT_FILE}.tar.zst | cut -d" " -f1)

# 
#mv ${OUT_FILE}.tar.zst ${OUT_FILE}.${MD5_ZSTD}.tar.zst

# remove uncompress package
#rm ${OUTPUT_FILE}

else
  DIR_NOW=$(pwd)
  echo "Error to many SlackBuild in $DIR_NOW" >> $LOG_FILE 
[[ "$VERBOSE" -ge "0" ]] && \
  echo "Error to many SlackBuild in $DIR_NOW" 
  
fi


